// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tmpl/swagger.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x3c\x55\x3d\x6e\xa3\x0a\x6e\x91\xb8\x2c\xa0\xe5\xc0\xa2\x0a\x55\xdc\xad\x64\xd2\x58\xdb\xd8\xde\xb1\x5d\x88\xda\xfc\x77\x64\xe7\x3b\x05\xad\x38\x91\x53\xfc\xfc\xe6\xbd\x79\xe3\xd1\x86\x94\x30\x32\xc3\xfb\x74\x9f\xee\x13\xa9\x4a\x9d\x25\x40\x41\x36\x67\x69\x9c\xd4\x2a\xc3\xe6\x7a\x45\xfa\x51\xab\x52\x9e\xd2\x4f\xd3\x05\xda\x76\x93\x00\x17\x62\x7b\x47\xfb\xd1\x81\x3d\xc5\x49\x77\xa6\x25\xe1\x18\xa0\x78\x6d\x89\x83\x44\x70\xdd\xc1\xf3\x79\xc9\x7b\x14\x96\x0e\xc2\x55\x91\xea\xc4\xc9\x66\xc9\xf5\x0a\x16\xea\x44\xd8\xbe\x50\xf3\x80\xed\x45\x9c\x3d\x21\xfb\x80\xf4\xb3\x72\xd2\x49\xb2\x68\xdb\x64\x07\x25\xea\xde\x34\x10\x71\xc3\x13\xb9\x27\xd6\xde\x7c\x13\x35\xf5\x9d\x2d\x73\x6e\x82\x36\xa9\x22\xd4\x1b\xe1\xaa\x68\xb6\x5b\xba\x45\xfc\xce\x6d\x46\x0b\x84\x07\x6c\x99\xac\xf6\x9c\x53\xe4\xf6\x55\x6d\x9b\x00\xa1\x9f\x70\xc4\x0d\xdf\xa9\xd6\x97\x18\xef\xc0\x54\xca\x5f\x6d\x1b\xa6\x10\x28\x93\xe9\xcb\x4c\x2b\x4a\x4d\xc2\x51\xae\x13\x1c\xc0\xf4\x99\x5c\xa5\x0b\xdc\x70\xd4\x5f\xf5\x4f\x62\x0c\x9a\x40\x37\xbd\xee\x7f\xf7\xc6\x5c\xc2\x67\x7d\x5d\x0b\x6e\xfa\x11\x8e\x0e\x2b\x56\xe8\x55\x96\xd0\x3c\xa3\x1c\x04\x8b\x9a\x1c\xb1\x9d\x81\x8f\xba\x68\xba\x9b\x39\xfa\x85\x44\x11\x78\x7d\x96\x51\x6f\x55\xf7\x2c\x6b\x3a\x36\x86\x26\xde\xdd\x86\x4e\x15\xf7\x3b\x3a\x08\xf7\x6f\xdb\x01\x66\xec\x32\x9b\x51\x86\x57\x8c\x4f\xcd\xa2\x5e\xcc\x7c\x96\x6c\x94\x59\x2c\x5a\x2c\x59\x8f\x08\x90\xa1\xc7\x57\x4f\xdc\x4c\x98\xcd\x2b\xaa\x45\x36\x9e\x01\xd7\x98\xa0\x63\x1d\x4b\x75\x9a\x88\xeb\x1d\x1d\x70\xa6\x57\x2f\x99\x8a\x0c\x8e\x3d\xfd\x2d\xe5\xdb\x99\xfa\x27\xf8\xf7\x40\x55\x2c\xfc\x2f\x89\x16\x00\x93\x35\x5a\x59\xb2\x93\xf5\xbb\xfd\x7e\xde\xc7\xd2\xd0\xfa\x3c\x27\x6b\x4b\x7f\x86\x36\xc4\x22\xc0\x9b\x64\x25\xfd\xe7\xdf\xdf\x01\x00\x00\xff\xff\x0d\xe0\x23\xe5\x2f\x05\x00\x00")

func tmplSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmplSwaggerYaml,
		"tmpl/swagger.yaml",
	)
}

func tmplSwaggerYaml() (*asset, error) {
	bytes, err := tmplSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/swagger.yaml", size: 1327, mode: os.FileMode(420), modTime: time.Unix(1582394795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/swagger.yaml": tmplSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"swagger.yaml": &bintree{tmplSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
